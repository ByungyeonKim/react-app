{"version":3,"sources":["components/Subject.js","components/TOC.js","components/ReadContent.js","components/CreateContent.js","components/UpdateContent.js","components/Control.js","App.js","serviceWorker.js","index.js"],"names":["Subject","href","onClick","e","preventDefault","this","props","onChangePage","bind","title","sub","content","Component","TOC","newProps","data","lists","i","length","push","key","id","target","dataset","data-id","ReadContent","desc","CreateContent","action","method","onSubmit","value","type","name","placeholder","UpdateContent","state","inputFormHandler","setState","console","log","onChange","Control","onChangeMode","App","max_content_id","mode","selected_content_id","welcome","subject","contents","_title","_desc","_article","_content","getReadContent","newContents","Array","from","_id","_contents","className","Number","_mode","window","confirm","splice","alert","getContent","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f14b4159.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Subject extends Component {\n  //class 안에 소속되어 있다면 함수 앞에 function을 쓰지 않아도 된다.\n  render() {\n    return (\n      //Component를 만들때는 반드시 하나의 최상위 태그로 시작해야한다.\n      //여기선 header가 최상위 태그\n      <header>\n        <h1>\n          <a\n            href='/'\n            onClick={function (e) {\n              e.preventDefault();\n              this.props.onChangePage();\n            }.bind(this)}\n          >\n            {this.props.title}\n          </a>\n        </h1>\n        <h2>{this.props.sub}</h2>\n        {this.props.content}\n      </header>\n    );\n  }\n}\n\nexport default Subject;\n","import React, { Component } from 'react';\n\nclass TOC extends Component {\n  // 현재 데이터와 새로운 데이터가 같다면 render함수를 호출하지 않는다.(성능개선)\n  // https://ko.reactjs.org/docs/react-component.html#shouldcomponentupdate\n  // 기본 동작은 매 state 변화마다 다시 렌더링을 수행하는 것이며, 대부분의 경우 기본 동작에 따라야 한다.\n  // props 또는 state가 새로운 값으로 갱신되어서 렌더링이 발생하기 직전에 호출된다.\n  shouldComponentUpdate(newProps) {\n    if (this.props.data === newProps.data) {\n      return false;\n    }\n    return true;\n  }\n  render() {\n    let lists = [];\n    let data = this.props.data;\n    let i = 0;\n    while (i < data.length) {\n      lists.push(\n        <li key={data[i].id}>\n          <a\n            onClick={function (e) {\n              e.preventDefault();\n              this.props.onChangePage(e.target.dataset.id);\n            }.bind(this)}\n            href={'/content/' + data[i].id}\n            data-id={data[i].id}\n          >\n            {data[i].title}\n          </a>\n        </li>\n      );\n      i = i + 1;\n    }\n    return (\n      <nav>\n        <ul>{lists}</ul>\n      </nav>\n    );\n  }\n}\n\nexport default TOC;\n","import React, { Component } from 'react';\n\nclass ReadContent extends Component {\n  render() {\n    return (\n      <article>\n        <h2>{this.props.title}</h2>\n        {this.props.desc}\n      </article>\n    );\n  }\n}\n\nexport default ReadContent;\n","import React, { Component } from 'react';\n\nclass CreateContent extends Component {\n  render() {\n    return (\n      <article>\n        <h2>Create</h2>\n        <form\n          action='/create_process'\n          method='post'\n          onSubmit={function (e) {\n            e.preventDefault();\n            this.props.onSubmit(e.target.title.value, e.target.desc.value);\n          }.bind(this)}\n        >\n          <p>\n            <input type='text' name='title' placeholder='제목' />\n          </p>\n          <p>\n            {/* 입력할 텍스트가 여러줄일때 textarea를 쓴다. */}\n            <textarea name='desc' placeholder='내용'></textarea>\n          </p>\n          <p>\n            <input type='submit' value='추가' />\n          </p>\n        </form>\n      </article>\n    );\n  }\n}\n\nexport default CreateContent;\n","import React, { Component } from 'react';\n\nclass UpdateContent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.data.id,\n      title: this.props.data.title,\n      desc: this.props.data.desc,\n    };\n    // 핸들러 변수에 바인드 선언\n    this.inputFormHandler = this.inputFormHandler.bind(this);\n  }\n  inputFormHandler(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  render() {\n    console.log(this.props.data);\n    return (\n      <article>\n        <h2>Update</h2>\n        <form\n          action='/update_process'\n          method='post'\n          onSubmit={function (e) {\n            e.preventDefault();\n            this.props.onSubmit(\n              this.state.id,\n              this.state.title,\n              this.state.desc\n            );\n          }.bind(this)}\n        >\n          <input type='hidden' name='id' value={this.state.id} />\n          <p>\n            <input\n              type='text'\n              name='title'\n              placeholder='제목'\n              value={this.state.title}\n              onChange={this.inputFormHandler}\n            />\n          </p>\n          <p>\n            {/* 입력할 텍스트가 여러줄일때 textarea를 쓴다. */}\n            <textarea\n              name='desc'\n              placeholder='내용'\n              value={this.state.desc}\n              onChange={this.inputFormHandler}\n            ></textarea>\n          </p>\n          <p>\n            <input type='submit' value='저장' />\n          </p>\n        </form>\n      </article>\n    );\n  }\n}\n\nexport default UpdateContent;\n","import React, { Component } from 'react';\n\nclass Control extends Component {\n  render() {\n    return (\n      <ul>\n        <li>\n          <a\n            href='/create'\n            onClick={function (e) {\n              e.preventDefault();\n              this.props.onChangeMode('create');\n            }.bind(this)}\n          >\n            create{' '}\n          </a>\n        </li>\n        <li>\n          <a\n            href='/update'\n            onClick={function (e) {\n              e.preventDefault();\n              this.props.onChangeMode('update');\n            }.bind(this)}\n          >\n            update{' '}\n          </a>\n        </li>\n        <li>\n          <input\n            type='button'\n            value='delete'\n            onClick={function (e) {\n              e.preventDefault();\n              this.props.onChangeMode('delete');\n            }.bind(this)}\n          ></input>\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default Control;\n","import React, { Component } from 'react';\nimport Subject from './components/Subject';\nimport TOC from './components/TOC';\nimport ReadContent from './components/ReadContent';\nimport CreateContent from './components/CreateContent';\nimport UpdateContent from './components/UpdateContent';\nimport Control from './components/Control';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // UI와 관련이 없고 state 값에 넣을 경우 불필요한 렌더링이 발생할 수 있다.\n    this.max_content_id = 3;\n    this.state = {\n      mode: 'welcome',\n      selected_content_id: 1,\n      welcome: { title: '환영합니다', desc: '안녕, 리액트!' },\n      subject: {\n        title: 'React WEB 🤔',\n        sub: 'React',\n        content: '리액트로 다양한 컴포넌트 이벤트 만들기',\n      },\n      contents: [\n        { id: 1, title: 'HTML', desc: 'HTML is for information' },\n        { id: 2, title: 'CSS', desc: 'CSS is for design' },\n        { id: 3, title: 'JavaScript', desc: 'JavaScript is for interactive' },\n      ],\n    };\n  }\n  getReadContent() {\n    let i = 0;\n    while (i < this.state.contents.length) {\n      let data = this.state.contents[i];\n      if (data.id === this.state.selected_content_id) {\n        return data;\n        break;\n      }\n      i = i + 1;\n    }\n  }\n\n  getContent() {\n    let _title,\n      _desc,\n      _article = null;\n    if (this.state.mode === 'welcome') {\n      _title = this.state.welcome.title;\n      _desc = this.state.welcome.desc;\n      _article = <ReadContent title={_title} desc={_desc}></ReadContent>;\n    } else if (this.state.mode === 'read') {\n      let _content = this.getReadContent();\n      _article = (\n        <ReadContent title={_content.title} desc={_content.desc}></ReadContent>\n      );\n    } else if (this.state.mode === 'create') {\n      _article = (\n        <CreateContent\n          onSubmit={function (_title, _desc) {\n            this.max_content_id = this.max_content_id + 1;\n            // 객체의 경우엔 Object.assign()을 쓴다.\n            // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n            let newContents = Array.from(this.state.contents);\n            newContents.push({\n              id: this.max_content_id,\n              title: _title,\n              desc: _desc,\n            });\n            this.setState({\n              contents: newContents,\n              mode: 'read',\n            });\n          }.bind(this)}\n        ></CreateContent>\n      );\n    } else if (this.state.mode === 'update') {\n      let _content = this.getReadContent();\n      _article = (\n        <UpdateContent\n          data={_content}\n          onSubmit={function (_id, _title, _desc) {\n            let _contents = Array.from(this.state.contents);\n            let i = 0;\n            while (i < _contents.length) {\n              if (_contents[i].id === _id) {\n                _contents[i] = { id: _id, title: _title, desc: _desc };\n                break;\n              }\n              i = i + 1;\n            }\n            this.setState({\n              contents: _contents,\n              mode: 'read',\n            });\n          }.bind(this)}\n        ></UpdateContent>\n      );\n    }\n    return _article;\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <Subject\n          title={this.state.subject.title}\n          sub={this.state.subject.sub}\n          content={this.state.subject.content}\n          onChangePage={function () {\n            this.setState({ mode: 'welcome' });\n          }.bind(this)}\n        ></Subject>\n        <TOC\n          data={this.state.contents}\n          onChangePage={function (id) {\n            this.setState({ mode: 'read', selected_content_id: Number(id) });\n          }.bind(this)}\n        ></TOC>\n        <Control\n          onChangeMode={function (_mode) {\n            if (_mode === 'delete') {\n              if (window.confirm('삭제하시겠습니까?')) {\n                let _contents = Array.from(this.state.contents);\n                let i = 0;\n                while (i < _contents.length) {\n                  if (_contents[i].id === this.state.selected_content_id) {\n                    _contents.splice(i, 1);\n                    break;\n                  }\n                  i = i + 1;\n                }\n                this.setState({\n                  contents: _contents,\n                  mode: 'welcome',\n                });\n                alert('삭제완료');\n              }\n            } else {\n              this.setState({\n                mode: _mode,\n              });\n            }\n          }.bind(this)}\n        ></Control>\n        {this.getContent()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}